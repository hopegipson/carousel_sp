{"version":3,"sources":["js/custom.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"custom.a62a38dd.js","sourceRoot":"../src","sourcesContent":["// const $menu = document.querySelector(\".menu\");\n// const $items = document.querySelectorAll(\".menu--item\");\n\n// let menuWidth = $menu.clientWidth;\n// let itemWidth = $items[0].clientWidth;\n// let wrapWidth = $items.length * itemWidth;\n// let scrollSpeed = 0;\n// let oldScrollY = 0;\n// let scrollY = 0;\n// let y = 0;\n// /*--------------------\n// Lerp\n// --------------------*/\n// const lerp = (v0, v1, t) => {\n//   return v0 * (1 - t) + v1 * t;\n// };\n// /*--------------------\n// Dispose\n// --------------------*/\n// const dispose = (scroll) => {\n//   gsap.set($items, {\n//     x: (i) => {\n//       return i * itemWidth + scroll;\n//     },\n//     modifiers: {\n//       x: (x, target) => {\n//         const s = gsap.utils.wrap(\n//           -itemWidth,\n//           wrapWidth - itemWidth,\n//           parseInt(x)\n//         );\n//         return `${s}px`;\n//       },\n//     },\n//   });\n// };\n// //dispose(0);\n// /*--------------------\n// Wheel\n// --------------------*/\n// const handleMouseWheel = (e) => {\n//   scrollY -= e.deltaY * 0.9;\n// };\n// /*--------------------\n// Touch\n// --------------------*/\n// let touchStart = 0;\n// let touchX = 0;\n// let isDragging = false;\n\n// const handleTouchStart = (e) => {\n//   console.log(e);\n//   touchStart = e.clientX || e.touches[0].clientX;\n//   isDragging = true;\n// };\n// const handleTouchMove = (e) => {\n//   if (!isDragging) return;\n//   touchX = e.clientX || e.touches[0].clientX;\n//   scrollY += (touchX - touchStart) * 2.5;\n//   touchStart = touchX;\n// };\n// const handleTouchEnd = () => {\n//   isDragging = false;\n// };\n// /*--------------------\n// Listeners\n// --------------------*/\n// $menu.addEventListener(\"mousewheel\", handleMouseWheel);\n// $menu.addEventListener(\"touchstart\", handleTouchStart);\n// $menu.addEventListener(\"touchmove\", handleTouchMove);\n// $menu.addEventListener(\"touchend\", handleTouchEnd);\n// $menu.addEventListener(\"mousedown\", handleTouchStart);\n// $menu.addEventListener(\"mousemove\", handleTouchMove);\n// $menu.addEventListener(\"mouseleave\", handleTouchEnd);\n// $menu.addEventListener(\"mouseup\", handleTouchEnd);\n// $menu.addEventListener(\"selectstart\", () => {\n//   return false;\n// });\n// /*--------------------\n// Resize\n// --------------------*/\n// window.addEventListener(\"resize\", () => {\n//   menuWidth = $menu.clientWidth;\n//   itemWidth = $items[0].clientWidth;\n//   wrapWidth = $items.length * quoteitemWidth;\n// });\n// /*--------------------\n// Render\n// --------------------*/\n// const render = () => {\n//   requestAnimationFrame(render);\n//   y = lerp(y, scrollY, 0.1);\n//   dispose(y);\n//   scrollSpeed = y - oldScrollY;\n//   oldScrollY = y;\n//   gsap.to($items, {\n//     scale: 1 - Math.min(100, Math.abs(scrollSpeed)) * 0.003,\n//   });\n// };\n// render();\n"]}